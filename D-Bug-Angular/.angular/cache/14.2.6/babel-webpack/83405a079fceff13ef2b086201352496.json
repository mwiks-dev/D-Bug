{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { VERSION, InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject, ReplaySubject, merge, defer, of, iif, from, throwError } from 'rxjs';\nimport { scan, filter, distinctUntilChanged, switchMap, mergeMap, shareReplay, concatMap, catchError, tap, takeUntil, withLatestFrom, map, take, pluck, first } from 'rxjs/operators';\nimport { __rest } from 'tslib';\nimport * as i1$1 from '@auth0/auth0-spa-js';\nimport { Auth0Client } from '@auth0/auth0-spa-js';\nexport { InMemoryCache, LocalStorageCache, User } from '@auth0/auth0-spa-js';\nimport { Router } from '@angular/router';\nimport * as i1 from '@angular/common';\nvar useragent = {\n  name: '@auth0/auth0-angular',\n  version: '1.11.0'\n};\n\nclass Auth0ClientFactory {\n  static createClient(configFactory) {\n    const config = configFactory.get();\n\n    if (!config) {\n      throw new Error('Configuration must be specified either through AuthModule.forRoot or through AuthClientConfig.set');\n    }\n\n    const {\n      redirectUri,\n      clientId,\n      maxAge,\n      httpInterceptor\n    } = config,\n          rest = __rest(config, [\"redirectUri\", \"clientId\", \"maxAge\", \"httpInterceptor\"]);\n\n    return new Auth0Client(Object.assign(Object.assign({\n      redirect_uri: redirectUri || window.location.origin,\n      client_id: clientId,\n      max_age: maxAge\n    }, rest), {\n      auth0Client: {\n        name: useragent.name,\n        version: useragent.version,\n        env: {\n          'angular/core': VERSION.full\n        }\n      }\n    }));\n  }\n\n}\n\nconst Auth0ClientService = new InjectionToken('auth0.client');\n/**\n * A custom type guard to help identify route definitions that are actually HttpInterceptorRouteConfig types.\n * @param def The route definition type\n */\n\nfunction isHttpInterceptorRouteConfig(def) {\n  return typeof def !== 'string';\n}\n/**\n * Gets and sets configuration for the internal Auth0 client. This can be\n * used to provide configuration outside of using AuthModule.forRoot, i.e. from\n * a factory provided by APP_INITIALIZER.\n *\n * @usage\n *\n * ```js\n * // app.module.ts\n * // ---------------------------\n * import { AuthModule, AuthClientConfig } from '@auth0/auth0-angular';\n *\n * // Provide an initializer function that returns a Promise\n * function configInitializer(\n *   http: HttpClient,\n *   config: AuthClientConfig\n * ) {\n *   return () =>\n *     http\n *       .get('/config')\n *       .toPromise()\n *       .then((loadedConfig: any) => config.set(loadedConfig));   // Set the config that was loaded asynchronously here\n * }\n *\n * // Provide APP_INITIALIZER with this function. Note that there is no config passed to AuthModule.forRoot\n * imports: [\n *   // other imports..\n *\n *   HttpClientModule,\n *   AuthModule.forRoot(),   //<- don't pass any config here\n * ],\n * providers: [\n *   {\n *     provide: APP_INITIALIZER,\n *     useFactory: configInitializer,    // <- pass your initializer function here\n *     deps: [HttpClient, AuthClientConfig],\n *     multi: true,\n *   },\n * ],\n * ```\n *\n */\n\n\nclass AuthClientConfig {\n  constructor(config) {\n    if (config) {\n      this.set(config);\n    }\n  }\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n\n\n  set(config) {\n    this.config = config;\n  }\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n\n\n  get() {\n    return this.config;\n  }\n\n}\n\nAuthClientConfig.ɵfac = function AuthClientConfig_Factory(t) {\n  return new (t || AuthClientConfig)(i0.ɵɵinject(AuthConfigService, 8));\n};\n\nAuthClientConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthClientConfig,\n  factory: AuthClientConfig.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthClientConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [AuthConfigService]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Injection token for accessing configuration.\n *\n * @usageNotes\n *\n * Use the `Inject` decorator to access the configuration from a service or component:\n *\n * ```\n * class MyService(@Inject(AuthConfigService) config: AuthConfig) {}\n * ```\n */\n\n\nconst AuthConfigService = new InjectionToken('auth0-angular.config');\n\nclass AbstractNavigator {\n  constructor(location, injector) {\n    this.location = location;\n\n    try {\n      this.router = injector.get(Router);\n    } catch (_a) {}\n  }\n  /**\n   * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n   * to `window.history.replaceState`.\n   * @param url The url to navigate to\n   */\n\n\n  navigateByUrl(url) {\n    if (this.router) {\n      this.router.navigateByUrl(url);\n      return;\n    }\n\n    this.location.replaceState(url);\n  }\n\n}\n\nAbstractNavigator.ɵfac = function AbstractNavigator_Factory(t) {\n  return new (t || AbstractNavigator)(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i0.Injector));\n};\n\nAbstractNavigator.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AbstractNavigator,\n  factory: AbstractNavigator.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractNavigator, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Location\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n/**\n * Tracks the Authentication State for the SDK\n */\n\n\nclass AuthState {\n  constructor(auth0Client) {\n    this.auth0Client = auth0Client;\n    this.isLoadingSubject$ = new BehaviorSubject(true);\n    this.refresh$ = new Subject();\n    this.accessToken$ = new ReplaySubject(1);\n    this.errorSubject$ = new ReplaySubject(1);\n    /**\n     * Emits boolean values indicating the loading state of the SDK.\n     */\n\n    this.isLoading$ = this.isLoadingSubject$.asObservable();\n    /**\n     * Trigger used to pull User information from the Auth0Client.\n     * Triggers when the access token has changed.\n     */\n\n    this.accessTokenTrigger$ = this.accessToken$.pipe(scan((acc, current) => {\n      return {\n        previous: acc.current,\n        current\n      };\n    }, {\n      current: null,\n      previous: null\n    }), filter(({\n      previous,\n      current\n    }) => previous !== current));\n    /**\n     * Trigger used to pull User information from the Auth0Client.\n     * Triggers when an event occurs that needs to retrigger the User Profile information.\n     * Events: Login, Access Token change and Logout\n     */\n\n    this.isAuthenticatedTrigger$ = this.isLoading$.pipe(filter(loading => !loading), distinctUntilChanged(), switchMap(() => // To track the value of isAuthenticated over time, we need to merge:\n    //  - the current value\n    //  - the value whenever the access token changes. (this should always be true of there is an access token\n    //    but it is safer to pass this through this.auth0Client.isAuthenticated() nevertheless)\n    //  - the value whenever refreshState$ emits\n    merge(defer(() => this.auth0Client.isAuthenticated()), this.accessTokenTrigger$.pipe(mergeMap(() => this.auth0Client.isAuthenticated())), this.refresh$.pipe(mergeMap(() => this.auth0Client.isAuthenticated())))));\n    /**\n     * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n     * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n     */\n\n    this.isAuthenticated$ = this.isAuthenticatedTrigger$.pipe(distinctUntilChanged(), shareReplay(1));\n    /**\n     * Emits details about the authenticated user, or null if not authenticated.\n     */\n\n    this.user$ = this.isAuthenticatedTrigger$.pipe(concatMap(authenticated => authenticated ? this.auth0Client.getUser() : of(null)));\n    /**\n     * Emits ID token claims when authenticated, or null if not authenticated.\n     */\n\n    this.idTokenClaims$ = this.isAuthenticatedTrigger$.pipe(concatMap(authenticated => authenticated ? this.auth0Client.getIdTokenClaims() : of(null)));\n    /**\n     * Emits errors that occur during login, or when checking for an active session on startup.\n     */\n\n    this.error$ = this.errorSubject$.asObservable();\n  }\n  /**\n   * Update the isLoading state using the provided value\n   * @param isLoading The new value for isLoading\n   */\n\n\n  setIsLoading(isLoading) {\n    this.isLoadingSubject$.next(isLoading);\n  }\n  /**\n   * Refresh the state to ensure the `isAuthenticated`, `user$` and `idTokenClaims$`\n   * reflect the most up-to-date values from  Auth0Client.\n   */\n\n\n  refresh() {\n    this.refresh$.next();\n  }\n  /**\n   * Update the access token, doing so will also refresh the state.\n   * @param accessToken The new Access Token\n   */\n\n\n  setAccessToken(accessToken) {\n    this.accessToken$.next(accessToken);\n  }\n  /**\n   * Emits the error in the `error$` observable.\n   * @param error The new error\n   */\n\n\n  setError(error) {\n    this.errorSubject$.next(error);\n  }\n\n}\n\nAuthState.ɵfac = function AuthState_Factory(t) {\n  return new (t || AuthState)(i0.ɵɵinject(Auth0ClientService));\n};\n\nAuthState.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthState,\n  factory: AuthState.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthState, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Auth0Client,\n      decorators: [{\n        type: Inject,\n        args: [Auth0ClientService]\n      }]\n    }];\n  }, null);\n})();\n\nclass AuthService {\n  constructor(auth0Client, configFactory, navigator, authState) {\n    this.auth0Client = auth0Client;\n    this.configFactory = configFactory;\n    this.navigator = navigator;\n    this.authState = authState;\n    this.appStateSubject$ = new ReplaySubject(1); // https://stackoverflow.com/a/41177163\n\n    this.ngUnsubscribe$ = new Subject();\n    /**\n     * Emits boolean values indicating the loading state of the SDK.\n     */\n\n    this.isLoading$ = this.authState.isLoading$;\n    /**\n     * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n     * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n     */\n\n    this.isAuthenticated$ = this.authState.isAuthenticated$;\n    /**\n     * Emits details about the authenticated user, or null if not authenticated.\n     */\n\n    this.user$ = this.authState.user$;\n    /**\n     * Emits ID token claims when authenticated, or null if not authenticated.\n     */\n\n    this.idTokenClaims$ = this.authState.idTokenClaims$;\n    /**\n     * Emits errors that occur during login, or when checking for an active session on startup.\n     */\n\n    this.error$ = this.authState.error$;\n    /**\n     * Emits the value (if any) that was passed to the `loginWithRedirect` method call\n     * but only **after** `handleRedirectCallback` is first called\n     */\n\n    this.appState$ = this.appStateSubject$.asObservable();\n\n    const checkSessionOrCallback$ = isCallback => iif(() => isCallback, this.handleRedirectCallback(), defer(() => this.auth0Client.checkSession()));\n\n    this.shouldHandleCallback().pipe(switchMap(isCallback => checkSessionOrCallback$(isCallback).pipe(catchError(error => {\n      const config = this.configFactory.get();\n      this.navigator.navigateByUrl(config.errorPath || '/');\n      this.authState.setError(error);\n      return of(undefined);\n    }))), tap(() => {\n      this.authState.setIsLoading(false);\n    }), takeUntil(this.ngUnsubscribe$)).subscribe();\n  }\n  /**\n   * Called when the service is destroyed\n   */\n\n\n  ngOnDestroy() {\n    // https://stackoverflow.com/a/41177163\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n  /**\n   * ```js\n   * loginWithRedirect(options);\n   * ```\n   *\n   * Performs a redirect to `/authorize` using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated.\n   *\n   * @param options The login options\n   */\n\n\n  loginWithRedirect(options) {\n    return from(this.auth0Client.loginWithRedirect(options));\n  }\n  /**\n   * ```js\n   * await loginWithPopup(options);\n   * ```\n   *\n   * Opens a popup with the `/authorize` URL using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated. If the response is successful,\n   * results will be valid according to their expiration times.\n   *\n   * IMPORTANT: This method has to be called from an event handler\n   * that was started by the user like a button click, for example,\n   * otherwise the popup will be blocked in most browsers.\n   *\n   * @param options The login options\n   * @param config Configuration for the popup window\n   */\n\n\n  loginWithPopup(options, config) {\n    return from(this.auth0Client.loginWithPopup(options, config).then(() => {\n      this.authState.refresh();\n    }));\n  }\n  /**\n   * ```js\n   * logout();\n   * ```\n   *\n   * Clears the application session and performs a redirect to `/v2/logout`, using\n   * the parameters provided as arguments, to clear the Auth0 session.\n   * If the `federated` option is specified it also clears the Identity Provider session.\n   * If the `localOnly` option is specified, it only clears the application session.\n   * It is invalid to set both the `federated` and `localOnly` options to `true`,\n   * and an error will be thrown if you do.\n   * [Read more about how Logout works at Auth0](https://auth0.com/docs/logout).\n   *\n   * @param options The logout options\n   */\n\n\n  logout(options) {\n    const logout = this.auth0Client.logout(options) || of(null);\n    from(logout).subscribe(() => {\n      if (options === null || options === void 0 ? void 0 : options.localOnly) {\n        this.authState.refresh();\n      }\n    });\n  }\n  /**\n   * ```js\n   * getAccessTokenSilently(options).subscribe(token => ...)\n   * ```\n   *\n   * If there's a valid token stored, return it. Otherwise, opens an\n   * iframe with the `/authorize` URL using the parameters provided\n   * as arguments. Random and secure `state` and `nonce` parameters\n   * will be auto-generated. If the response is successful, results\n   * will be valid according to their expiration times.\n   *\n   * If refresh tokens are used, the token endpoint is called directly with the\n   * 'refresh_token' grant. If no refresh token is available to make this call,\n   * the SDK falls back to using an iframe to the '/authorize' URL.\n   *\n   * This method may use a web worker to perform the token call if the in-memory\n   * cache is used.\n   *\n   * If an `audience` value is given to this function, the SDK always falls\n   * back to using an iframe to make the token exchange.\n   *\n   * Note that in all cases, falling back to an iframe requires access to\n   * the `auth0` cookie, and thus will not work in browsers that block third-party\n   * cookies by default (Safari, Brave, etc).\n   *\n   * @param options The options for configuring the token fetch.\n   */\n\n\n  getAccessTokenSilently(options = {}) {\n    return of(this.auth0Client).pipe(concatMap(client => options.detailedResponse === true ? client.getTokenSilently(Object.assign(Object.assign({}, options), {\n      detailedResponse: true\n    })) : client.getTokenSilently(options)), tap(token => this.authState.setAccessToken(typeof token === 'string' ? token : token.access_token)), catchError(error => {\n      this.authState.setError(error);\n      this.authState.refresh();\n      return throwError(error);\n    }));\n  }\n  /**\n   * ```js\n   * getTokenWithPopup(options).subscribe(token => ...)\n   * ```\n   *\n   * Get an access token interactively.\n   *\n   * Opens a popup with the `/authorize` URL using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated. If the response is successful,\n   * results will be valid according to their expiration times.\n   */\n\n\n  getAccessTokenWithPopup(options) {\n    return of(this.auth0Client).pipe(concatMap(client => client.getTokenWithPopup(options)), tap(token => this.authState.setAccessToken(token)), catchError(error => {\n      this.authState.setError(error);\n      this.authState.refresh();\n      return throwError(error);\n    }));\n  }\n  /**\n   * ```js\n   * getUser(options).subscribe(user => ...);\n   * ```\n   *\n   * Returns the user information if available (decoded\n   * from the `id_token`).\n   *\n   * If you provide an audience or scope, they should match an existing Access Token\n   * (the SDK stores a corresponding ID Token with every Access Token, and uses the\n   * scope and audience to look up the ID Token)\n   *\n   * @remarks\n   *\n   * The returned observable will emit once and then complete.\n   *\n   * @typeparam TUser The type to return, has to extend {@link User}.\n   * @param options The options to get the user\n   */\n\n\n  getUser(options) {\n    return defer(() => this.auth0Client.getUser(options));\n  }\n  /**\n   * ```js\n   * getIdTokenClaims(options).subscribe(claims => ...);\n   * ```\n   *\n   * Returns all claims from the id_token if available.\n   *\n   * If you provide an audience or scope, they should match an existing Access Token\n   * (the SDK stores a corresponding ID Token with every Access Token, and uses the\n   * scope and audience to look up the ID Token)\n   *\n   * @remarks\n   *\n   * The returned observable will emit once and then complete.\n   *\n   * @param options The options to get the Id token claims\n   */\n\n\n  getIdTokenClaims(options) {\n    return defer(() => this.auth0Client.getIdTokenClaims(options));\n  }\n  /**\n   * ```js\n   * handleRedirectCallback(url).subscribe(result => ...)\n   * ```\n   *\n   * After the browser redirects back to the callback page,\n   * call `handleRedirectCallback` to handle success and error\n   * responses from Auth0. If the response is successful, results\n   * will be valid according to their expiration times.\n   *\n   * Calling this method also refreshes the authentication and user states.\n   *\n   * @param url The URL to that should be used to retrieve the `state` and `code` values. Defaults to `window.location.href` if not given.\n   */\n\n\n  handleRedirectCallback(url) {\n    return defer(() => this.auth0Client.handleRedirectCallback(url)).pipe(withLatestFrom(this.authState.isLoading$), tap(([result, isLoading]) => {\n      var _a;\n\n      if (!isLoading) {\n        this.authState.refresh();\n      }\n\n      const appState = result === null || result === void 0 ? void 0 : result.appState;\n      const target = (_a = appState === null || appState === void 0 ? void 0 : appState.target) !== null && _a !== void 0 ? _a : '/';\n\n      if (appState) {\n        this.appStateSubject$.next(appState);\n      }\n\n      this.navigator.navigateByUrl(target);\n    }), map(([result]) => result));\n  }\n  /**\n   * ```js\n   * buildAuthorizeUrl().subscribe(url => ...)\n   * ```\n   *\n   * Builds an `/authorize` URL for loginWithRedirect using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated.\n   * @param options The options\n   * @returns A URL to the authorize endpoint\n   */\n\n\n  buildAuthorizeUrl(options) {\n    return defer(() => this.auth0Client.buildAuthorizeUrl(options));\n  }\n  /**\n   * ```js\n   * buildLogoutUrl().subscribe(url => ...)\n   * ```\n   * Builds a URL to the logout endpoint.\n   *\n   * @param options The options used to configure the parameters that appear in the logout endpoint URL.\n   * @returns a URL to the logout endpoint using the parameters provided as arguments.\n   */\n\n\n  buildLogoutUrl(options) {\n    return of(this.auth0Client.buildLogoutUrl(options));\n  }\n\n  shouldHandleCallback() {\n    return of(location.search).pipe(map(search => {\n      return (search.includes('code=') || search.includes('error=')) && search.includes('state=') && !this.configFactory.get().skipRedirectCallback;\n    }));\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(Auth0ClientService), i0.ɵɵinject(AuthClientConfig), i0.ɵɵinject(AbstractNavigator), i0.ɵɵinject(AuthState));\n};\n\nAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Auth0Client,\n      decorators: [{\n        type: Inject,\n        args: [Auth0ClientService]\n      }]\n    }, {\n      type: AuthClientConfig\n    }, {\n      type: AbstractNavigator\n    }, {\n      type: AuthState\n    }];\n  }, null);\n})();\n\nclass AuthGuard {\n  constructor(auth) {\n    this.auth = auth;\n  }\n\n  canLoad(route, segments) {\n    return this.auth.isAuthenticated$.pipe(take(1));\n  }\n\n  canActivate(next, state) {\n    return this.redirectIfUnauthenticated(state);\n  }\n\n  canActivateChild(childRoute, state) {\n    return this.redirectIfUnauthenticated(state);\n  }\n\n  redirectIfUnauthenticated(state) {\n    return this.auth.isAuthenticated$.pipe(tap(loggedIn => {\n      if (!loggedIn) {\n        this.auth.loginWithRedirect({\n          appState: {\n            target: state.url\n          }\n        });\n      }\n    }));\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(AuthService));\n};\n\nAuthGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: AuthService\n    }];\n  }, null);\n})();\n\nclass AuthModule {\n  /**\n   * Initialize the authentication module system. Configuration can either be specified here,\n   * or by calling AuthClientConfig.set (perhaps from an APP_INITIALIZER factory function).\n   * @param config The optional configuration for the SDK.\n   */\n  static forRoot(config) {\n    return {\n      ngModule: AuthModule,\n      providers: [AuthService, AuthGuard, {\n        provide: AuthConfigService,\n        useValue: config\n      }, {\n        provide: Auth0ClientService,\n        useFactory: Auth0ClientFactory.createClient,\n        deps: [AuthClientConfig]\n      }]\n    };\n  }\n\n}\n\nAuthModule.ɵfac = function AuthModule_Factory(t) {\n  return new (t || AuthModule)();\n};\n\nAuthModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AuthModule\n});\nAuthModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthModule, [{\n    type: NgModule\n  }], null, null);\n})();\n\nclass AuthHttpInterceptor {\n  constructor(configFactory, auth0Client, authState) {\n    this.configFactory = configFactory;\n    this.auth0Client = auth0Client;\n    this.authState = authState;\n  }\n\n  intercept(req, next) {\n    var _a;\n\n    const config = this.configFactory.get();\n\n    if (!((_a = config.httpInterceptor) === null || _a === void 0 ? void 0 : _a.allowedList)) {\n      return next.handle(req);\n    }\n\n    return this.findMatchingRoute(req, config.httpInterceptor).pipe(concatMap(route => iif( // Check if a route was matched\n    () => route !== null, // If we have a matching route, call getTokenSilently and attach the token to the\n    // outgoing request\n    of(route).pipe(pluck('tokenOptions'), concatMap(options => {\n      return this.getAccessTokenSilently(options).pipe(catchError(err => {\n        if (this.allowAnonymous(route, err)) {\n          return of('');\n        }\n\n        this.authState.setError(err);\n        return throwError(err);\n      }));\n    }), switchMap(token => {\n      // Clone the request and attach the bearer token\n      const clone = token ? req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      }) : req;\n      return next.handle(clone);\n    })), // If the URI being called was not found in our httpInterceptor config, simply\n    // pass the request through without attaching a token\n    next.handle(req))));\n  }\n  /**\n   * Duplicate of AuthService.getAccessTokenSilently, but with a slightly different error handling.\n   * Only used internally in the interceptor.\n   * @param options The options for configuring the token fetch.\n   */\n\n\n  getAccessTokenSilently(options) {\n    return of(this.auth0Client).pipe(concatMap(client => client.getTokenSilently(options)), tap(token => this.authState.setAccessToken(token)), catchError(error => {\n      this.authState.refresh();\n      return throwError(error);\n    }));\n  }\n  /**\n   * Strips the query and fragment from the given uri\n   * @param uri The uri to remove the query and fragment from\n   */\n\n\n  stripQueryFrom(uri) {\n    if (uri.indexOf('?') > -1) {\n      uri = uri.substr(0, uri.indexOf('?'));\n    }\n\n    if (uri.indexOf('#') > -1) {\n      uri = uri.substr(0, uri.indexOf('#'));\n    }\n\n    return uri;\n  }\n  /**\n   * Determines whether the specified route can have an access token attached to it, based on matching the HTTP request against\n   * the interceptor route configuration.\n   * @param route The route to test\n   * @param request The HTTP request\n   */\n\n\n  canAttachToken(route, request) {\n    const testPrimitive = value => {\n      if (!value) {\n        return false;\n      }\n\n      const requestPath = this.stripQueryFrom(request.url);\n\n      if (value === requestPath) {\n        return true;\n      } // If the URL ends with an asterisk, match using startsWith.\n\n\n      return value.indexOf('*') === value.length - 1 && request.url.startsWith(value.substr(0, value.length - 1));\n    };\n\n    if (isHttpInterceptorRouteConfig(route)) {\n      if (route.httpMethod && route.httpMethod !== request.method) {\n        return false;\n      }\n      /* istanbul ignore if */\n\n\n      if (!route.uri && !route.uriMatcher) {\n        console.warn('Either a uri or uriMatcher is required when configuring the HTTP interceptor.');\n      }\n\n      return route.uriMatcher ? route.uriMatcher(request.url) : testPrimitive(route.uri);\n    }\n\n    return testPrimitive(route);\n  }\n  /**\n   * Tries to match a route from the SDK configuration to the HTTP request.\n   * If a match is found, the route configuration is returned.\n   * @param request The Http request\n   * @param config HttpInterceptorConfig\n   */\n\n\n  findMatchingRoute(request, config) {\n    return from(config.allowedList).pipe(first(route => this.canAttachToken(route, request), null));\n  }\n\n  allowAnonymous(route, err) {\n    return !!route && isHttpInterceptorRouteConfig(route) && !!route.allowAnonymous && ['login_required', 'consent_required'].includes(err.error);\n  }\n\n}\n\nAuthHttpInterceptor.ɵfac = function AuthHttpInterceptor_Factory(t) {\n  return new (t || AuthHttpInterceptor)(i0.ɵɵinject(AuthClientConfig), i0.ɵɵinject(Auth0ClientService), i0.ɵɵinject(AuthState));\n};\n\nAuthHttpInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthHttpInterceptor,\n  factory: AuthHttpInterceptor.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthHttpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: AuthClientConfig\n    }, {\n      type: i1$1.Auth0Client,\n      decorators: [{\n        type: Inject,\n        args: [Auth0ClientService]\n      }]\n    }, {\n      type: AuthState\n    }];\n  }, null);\n})();\n/*\n * Public API Surface of auth0-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Auth0ClientFactory, Auth0ClientService, AuthClientConfig, AuthConfigService, AuthGuard, AuthHttpInterceptor, AuthModule, AuthService, AuthState, isHttpInterceptorRouteConfig };","map":{"version":3,"names":["i0","VERSION","InjectionToken","Injectable","Optional","Inject","NgModule","BehaviorSubject","Subject","ReplaySubject","merge","defer","of","iif","from","throwError","scan","filter","distinctUntilChanged","switchMap","mergeMap","shareReplay","concatMap","catchError","tap","takeUntil","withLatestFrom","map","take","pluck","first","__rest","i1$1","Auth0Client","InMemoryCache","LocalStorageCache","User","Router","i1","useragent","name","version","Auth0ClientFactory","createClient","configFactory","config","get","Error","redirectUri","clientId","maxAge","httpInterceptor","rest","Object","assign","redirect_uri","window","location","origin","client_id","max_age","auth0Client","env","full","Auth0ClientService","isHttpInterceptorRouteConfig","def","AuthClientConfig","constructor","set","ɵfac","AuthConfigService","ɵprov","type","args","providedIn","undefined","decorators","AbstractNavigator","injector","router","_a","navigateByUrl","url","replaceState","Location","Injector","AuthState","isLoadingSubject$","refresh$","accessToken$","errorSubject$","isLoading$","asObservable","accessTokenTrigger$","pipe","acc","current","previous","isAuthenticatedTrigger$","loading","isAuthenticated","isAuthenticated$","user$","authenticated","getUser","idTokenClaims$","getIdTokenClaims","error$","setIsLoading","isLoading","next","refresh","setAccessToken","accessToken","setError","error","AuthService","navigator","authState","appStateSubject$","ngUnsubscribe$","appState$","checkSessionOrCallback$","isCallback","handleRedirectCallback","checkSession","shouldHandleCallback","errorPath","subscribe","ngOnDestroy","complete","loginWithRedirect","options","loginWithPopup","then","logout","localOnly","getAccessTokenSilently","client","detailedResponse","getTokenSilently","token","access_token","getAccessTokenWithPopup","getTokenWithPopup","result","appState","target","buildAuthorizeUrl","buildLogoutUrl","search","includes","skipRedirectCallback","AuthGuard","auth","canLoad","route","segments","canActivate","state","redirectIfUnauthenticated","canActivateChild","childRoute","loggedIn","AuthModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","ɵmod","ɵinj","AuthHttpInterceptor","intercept","req","allowedList","handle","findMatchingRoute","err","allowAnonymous","clone","headers","stripQueryFrom","uri","indexOf","substr","canAttachToken","request","testPrimitive","value","requestPath","length","startsWith","httpMethod","method","uriMatcher","console","warn"],"sources":["/home/samuel/D-Bug/D-Bug-Angular/node_modules/@auth0/auth0-angular/fesm2015/auth0-auth0-angular.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { VERSION, InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject, ReplaySubject, merge, defer, of, iif, from, throwError } from 'rxjs';\nimport { scan, filter, distinctUntilChanged, switchMap, mergeMap, shareReplay, concatMap, catchError, tap, takeUntil, withLatestFrom, map, take, pluck, first } from 'rxjs/operators';\nimport { __rest } from 'tslib';\nimport * as i1$1 from '@auth0/auth0-spa-js';\nimport { Auth0Client } from '@auth0/auth0-spa-js';\nexport { InMemoryCache, LocalStorageCache, User } from '@auth0/auth0-spa-js';\nimport { Router } from '@angular/router';\nimport * as i1 from '@angular/common';\n\nvar useragent = { name: '@auth0/auth0-angular', version: '1.11.0' };\n\nclass Auth0ClientFactory {\n    static createClient(configFactory) {\n        const config = configFactory.get();\n        if (!config) {\n            throw new Error('Configuration must be specified either through AuthModule.forRoot or through AuthClientConfig.set');\n        }\n        const { redirectUri, clientId, maxAge, httpInterceptor } = config, rest = __rest(config, [\"redirectUri\", \"clientId\", \"maxAge\", \"httpInterceptor\"]);\n        return new Auth0Client(Object.assign(Object.assign({ redirect_uri: redirectUri || window.location.origin, client_id: clientId, max_age: maxAge }, rest), { auth0Client: {\n                name: useragent.name,\n                version: useragent.version,\n                env: {\n                    'angular/core': VERSION.full,\n                },\n            } }));\n    }\n}\nconst Auth0ClientService = new InjectionToken('auth0.client');\n\n/**\n * A custom type guard to help identify route definitions that are actually HttpInterceptorRouteConfig types.\n * @param def The route definition type\n */\nfunction isHttpInterceptorRouteConfig(def) {\n    return typeof def !== 'string';\n}\n/**\n * Gets and sets configuration for the internal Auth0 client. This can be\n * used to provide configuration outside of using AuthModule.forRoot, i.e. from\n * a factory provided by APP_INITIALIZER.\n *\n * @usage\n *\n * ```js\n * // app.module.ts\n * // ---------------------------\n * import { AuthModule, AuthClientConfig } from '@auth0/auth0-angular';\n *\n * // Provide an initializer function that returns a Promise\n * function configInitializer(\n *   http: HttpClient,\n *   config: AuthClientConfig\n * ) {\n *   return () =>\n *     http\n *       .get('/config')\n *       .toPromise()\n *       .then((loadedConfig: any) => config.set(loadedConfig));   // Set the config that was loaded asynchronously here\n * }\n *\n * // Provide APP_INITIALIZER with this function. Note that there is no config passed to AuthModule.forRoot\n * imports: [\n *   // other imports..\n *\n *   HttpClientModule,\n *   AuthModule.forRoot(),   //<- don't pass any config here\n * ],\n * providers: [\n *   {\n *     provide: APP_INITIALIZER,\n *     useFactory: configInitializer,    // <- pass your initializer function here\n *     deps: [HttpClient, AuthClientConfig],\n *     multi: true,\n *   },\n * ],\n * ```\n *\n */\nclass AuthClientConfig {\n    constructor(config) {\n        if (config) {\n            this.set(config);\n        }\n    }\n    /**\n     * Sets configuration to be read by other consumers of the service (see usage notes)\n     * @param config The configuration to set\n     */\n    set(config) {\n        this.config = config;\n    }\n    /**\n     * Gets the config that has been set by other consumers of the service\n     */\n    get() {\n        return this.config;\n    }\n}\nAuthClientConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthClientConfig, deps: [{ token: AuthConfigService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthClientConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthClientConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthClientConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [AuthConfigService]\n                }] }]; } });\n/**\n * Injection token for accessing configuration.\n *\n * @usageNotes\n *\n * Use the `Inject` decorator to access the configuration from a service or component:\n *\n * ```\n * class MyService(@Inject(AuthConfigService) config: AuthConfig) {}\n * ```\n */\nconst AuthConfigService = new InjectionToken('auth0-angular.config');\n\nclass AbstractNavigator {\n    constructor(location, injector) {\n        this.location = location;\n        try {\n            this.router = injector.get(Router);\n        }\n        catch (_a) { }\n    }\n    /**\n     * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n     * to `window.history.replaceState`.\n     * @param url The url to navigate to\n     */\n    navigateByUrl(url) {\n        if (this.router) {\n            this.router.navigateByUrl(url);\n            return;\n        }\n        this.location.replaceState(url);\n    }\n}\nAbstractNavigator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AbstractNavigator, deps: [{ token: i1.Location }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nAbstractNavigator.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AbstractNavigator, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AbstractNavigator, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Location }, { type: i0.Injector }]; } });\n\n/**\n * Tracks the Authentication State for the SDK\n */\nclass AuthState {\n    constructor(auth0Client) {\n        this.auth0Client = auth0Client;\n        this.isLoadingSubject$ = new BehaviorSubject(true);\n        this.refresh$ = new Subject();\n        this.accessToken$ = new ReplaySubject(1);\n        this.errorSubject$ = new ReplaySubject(1);\n        /**\n         * Emits boolean values indicating the loading state of the SDK.\n         */\n        this.isLoading$ = this.isLoadingSubject$.asObservable();\n        /**\n         * Trigger used to pull User information from the Auth0Client.\n         * Triggers when the access token has changed.\n         */\n        this.accessTokenTrigger$ = this.accessToken$.pipe(scan((acc, current) => {\n            return {\n                previous: acc.current,\n                current,\n            };\n        }, { current: null, previous: null }), filter(({ previous, current }) => previous !== current));\n        /**\n         * Trigger used to pull User information from the Auth0Client.\n         * Triggers when an event occurs that needs to retrigger the User Profile information.\n         * Events: Login, Access Token change and Logout\n         */\n        this.isAuthenticatedTrigger$ = this.isLoading$.pipe(filter((loading) => !loading), distinctUntilChanged(), switchMap(() => \n        // To track the value of isAuthenticated over time, we need to merge:\n        //  - the current value\n        //  - the value whenever the access token changes. (this should always be true of there is an access token\n        //    but it is safer to pass this through this.auth0Client.isAuthenticated() nevertheless)\n        //  - the value whenever refreshState$ emits\n        merge(defer(() => this.auth0Client.isAuthenticated()), this.accessTokenTrigger$.pipe(mergeMap(() => this.auth0Client.isAuthenticated())), this.refresh$.pipe(mergeMap(() => this.auth0Client.isAuthenticated())))));\n        /**\n         * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n         * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n         */\n        this.isAuthenticated$ = this.isAuthenticatedTrigger$.pipe(distinctUntilChanged(), shareReplay(1));\n        /**\n         * Emits details about the authenticated user, or null if not authenticated.\n         */\n        this.user$ = this.isAuthenticatedTrigger$.pipe(concatMap((authenticated) => authenticated ? this.auth0Client.getUser() : of(null)));\n        /**\n         * Emits ID token claims when authenticated, or null if not authenticated.\n         */\n        this.idTokenClaims$ = this.isAuthenticatedTrigger$.pipe(concatMap((authenticated) => authenticated ? this.auth0Client.getIdTokenClaims() : of(null)));\n        /**\n         * Emits errors that occur during login, or when checking for an active session on startup.\n         */\n        this.error$ = this.errorSubject$.asObservable();\n    }\n    /**\n     * Update the isLoading state using the provided value\n     * @param isLoading The new value for isLoading\n     */\n    setIsLoading(isLoading) {\n        this.isLoadingSubject$.next(isLoading);\n    }\n    /**\n     * Refresh the state to ensure the `isAuthenticated`, `user$` and `idTokenClaims$`\n     * reflect the most up-to-date values from  Auth0Client.\n     */\n    refresh() {\n        this.refresh$.next();\n    }\n    /**\n     * Update the access token, doing so will also refresh the state.\n     * @param accessToken The new Access Token\n     */\n    setAccessToken(accessToken) {\n        this.accessToken$.next(accessToken);\n    }\n    /**\n     * Emits the error in the `error$` observable.\n     * @param error The new error\n     */\n    setError(error) {\n        this.errorSubject$.next(error);\n    }\n}\nAuthState.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthState, deps: [{ token: Auth0ClientService }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthState.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthState, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthState, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1$1.Auth0Client, decorators: [{\n                    type: Inject,\n                    args: [Auth0ClientService]\n                }] }]; } });\n\nclass AuthService {\n    constructor(auth0Client, configFactory, navigator, authState) {\n        this.auth0Client = auth0Client;\n        this.configFactory = configFactory;\n        this.navigator = navigator;\n        this.authState = authState;\n        this.appStateSubject$ = new ReplaySubject(1);\n        // https://stackoverflow.com/a/41177163\n        this.ngUnsubscribe$ = new Subject();\n        /**\n         * Emits boolean values indicating the loading state of the SDK.\n         */\n        this.isLoading$ = this.authState.isLoading$;\n        /**\n         * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n         * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n         */\n        this.isAuthenticated$ = this.authState.isAuthenticated$;\n        /**\n         * Emits details about the authenticated user, or null if not authenticated.\n         */\n        this.user$ = this.authState.user$;\n        /**\n         * Emits ID token claims when authenticated, or null if not authenticated.\n         */\n        this.idTokenClaims$ = this.authState.idTokenClaims$;\n        /**\n         * Emits errors that occur during login, or when checking for an active session on startup.\n         */\n        this.error$ = this.authState.error$;\n        /**\n         * Emits the value (if any) that was passed to the `loginWithRedirect` method call\n         * but only **after** `handleRedirectCallback` is first called\n         */\n        this.appState$ = this.appStateSubject$.asObservable();\n        const checkSessionOrCallback$ = (isCallback) => iif(() => isCallback, this.handleRedirectCallback(), defer(() => this.auth0Client.checkSession()));\n        this.shouldHandleCallback()\n            .pipe(switchMap((isCallback) => checkSessionOrCallback$(isCallback).pipe(catchError((error) => {\n            const config = this.configFactory.get();\n            this.navigator.navigateByUrl(config.errorPath || '/');\n            this.authState.setError(error);\n            return of(undefined);\n        }))), tap(() => {\n            this.authState.setIsLoading(false);\n        }), takeUntil(this.ngUnsubscribe$))\n            .subscribe();\n    }\n    /**\n     * Called when the service is destroyed\n     */\n    ngOnDestroy() {\n        // https://stackoverflow.com/a/41177163\n        this.ngUnsubscribe$.next();\n        this.ngUnsubscribe$.complete();\n    }\n    /**\n     * ```js\n     * loginWithRedirect(options);\n     * ```\n     *\n     * Performs a redirect to `/authorize` using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated.\n     *\n     * @param options The login options\n     */\n    loginWithRedirect(options) {\n        return from(this.auth0Client.loginWithRedirect(options));\n    }\n    /**\n     * ```js\n     * await loginWithPopup(options);\n     * ```\n     *\n     * Opens a popup with the `/authorize` URL using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated. If the response is successful,\n     * results will be valid according to their expiration times.\n     *\n     * IMPORTANT: This method has to be called from an event handler\n     * that was started by the user like a button click, for example,\n     * otherwise the popup will be blocked in most browsers.\n     *\n     * @param options The login options\n     * @param config Configuration for the popup window\n     */\n    loginWithPopup(options, config) {\n        return from(this.auth0Client.loginWithPopup(options, config).then(() => {\n            this.authState.refresh();\n        }));\n    }\n    /**\n     * ```js\n     * logout();\n     * ```\n     *\n     * Clears the application session and performs a redirect to `/v2/logout`, using\n     * the parameters provided as arguments, to clear the Auth0 session.\n     * If the `federated` option is specified it also clears the Identity Provider session.\n     * If the `localOnly` option is specified, it only clears the application session.\n     * It is invalid to set both the `federated` and `localOnly` options to `true`,\n     * and an error will be thrown if you do.\n     * [Read more about how Logout works at Auth0](https://auth0.com/docs/logout).\n     *\n     * @param options The logout options\n     */\n    logout(options) {\n        const logout = this.auth0Client.logout(options) || of(null);\n        from(logout).subscribe(() => {\n            if (options === null || options === void 0 ? void 0 : options.localOnly) {\n                this.authState.refresh();\n            }\n        });\n    }\n    /**\n     * ```js\n     * getAccessTokenSilently(options).subscribe(token => ...)\n     * ```\n     *\n     * If there's a valid token stored, return it. Otherwise, opens an\n     * iframe with the `/authorize` URL using the parameters provided\n     * as arguments. Random and secure `state` and `nonce` parameters\n     * will be auto-generated. If the response is successful, results\n     * will be valid according to their expiration times.\n     *\n     * If refresh tokens are used, the token endpoint is called directly with the\n     * 'refresh_token' grant. If no refresh token is available to make this call,\n     * the SDK falls back to using an iframe to the '/authorize' URL.\n     *\n     * This method may use a web worker to perform the token call if the in-memory\n     * cache is used.\n     *\n     * If an `audience` value is given to this function, the SDK always falls\n     * back to using an iframe to make the token exchange.\n     *\n     * Note that in all cases, falling back to an iframe requires access to\n     * the `auth0` cookie, and thus will not work in browsers that block third-party\n     * cookies by default (Safari, Brave, etc).\n     *\n     * @param options The options for configuring the token fetch.\n     */\n    getAccessTokenSilently(options = {}) {\n        return of(this.auth0Client).pipe(concatMap((client) => options.detailedResponse === true\n            ? client.getTokenSilently(Object.assign(Object.assign({}, options), { detailedResponse: true }))\n            : client.getTokenSilently(options)), tap((token) => this.authState.setAccessToken(typeof token === 'string' ? token : token.access_token)), catchError((error) => {\n            this.authState.setError(error);\n            this.authState.refresh();\n            return throwError(error);\n        }));\n    }\n    /**\n     * ```js\n     * getTokenWithPopup(options).subscribe(token => ...)\n     * ```\n     *\n     * Get an access token interactively.\n     *\n     * Opens a popup with the `/authorize` URL using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated. If the response is successful,\n     * results will be valid according to their expiration times.\n     */\n    getAccessTokenWithPopup(options) {\n        return of(this.auth0Client).pipe(concatMap((client) => client.getTokenWithPopup(options)), tap((token) => this.authState.setAccessToken(token)), catchError((error) => {\n            this.authState.setError(error);\n            this.authState.refresh();\n            return throwError(error);\n        }));\n    }\n    /**\n     * ```js\n     * getUser(options).subscribe(user => ...);\n     * ```\n     *\n     * Returns the user information if available (decoded\n     * from the `id_token`).\n     *\n     * If you provide an audience or scope, they should match an existing Access Token\n     * (the SDK stores a corresponding ID Token with every Access Token, and uses the\n     * scope and audience to look up the ID Token)\n     *\n     * @remarks\n     *\n     * The returned observable will emit once and then complete.\n     *\n     * @typeparam TUser The type to return, has to extend {@link User}.\n     * @param options The options to get the user\n     */\n    getUser(options) {\n        return defer(() => this.auth0Client.getUser(options));\n    }\n    /**\n     * ```js\n     * getIdTokenClaims(options).subscribe(claims => ...);\n     * ```\n     *\n     * Returns all claims from the id_token if available.\n     *\n     * If you provide an audience or scope, they should match an existing Access Token\n     * (the SDK stores a corresponding ID Token with every Access Token, and uses the\n     * scope and audience to look up the ID Token)\n     *\n     * @remarks\n     *\n     * The returned observable will emit once and then complete.\n     *\n     * @param options The options to get the Id token claims\n     */\n    getIdTokenClaims(options) {\n        return defer(() => this.auth0Client.getIdTokenClaims(options));\n    }\n    /**\n     * ```js\n     * handleRedirectCallback(url).subscribe(result => ...)\n     * ```\n     *\n     * After the browser redirects back to the callback page,\n     * call `handleRedirectCallback` to handle success and error\n     * responses from Auth0. If the response is successful, results\n     * will be valid according to their expiration times.\n     *\n     * Calling this method also refreshes the authentication and user states.\n     *\n     * @param url The URL to that should be used to retrieve the `state` and `code` values. Defaults to `window.location.href` if not given.\n     */\n    handleRedirectCallback(url) {\n        return defer(() => this.auth0Client.handleRedirectCallback(url)).pipe(withLatestFrom(this.authState.isLoading$), tap(([result, isLoading]) => {\n            var _a;\n            if (!isLoading) {\n                this.authState.refresh();\n            }\n            const appState = result === null || result === void 0 ? void 0 : result.appState;\n            const target = (_a = appState === null || appState === void 0 ? void 0 : appState.target) !== null && _a !== void 0 ? _a : '/';\n            if (appState) {\n                this.appStateSubject$.next(appState);\n            }\n            this.navigator.navigateByUrl(target);\n        }), map(([result]) => result));\n    }\n    /**\n     * ```js\n     * buildAuthorizeUrl().subscribe(url => ...)\n     * ```\n     *\n     * Builds an `/authorize` URL for loginWithRedirect using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated.\n     * @param options The options\n     * @returns A URL to the authorize endpoint\n     */\n    buildAuthorizeUrl(options) {\n        return defer(() => this.auth0Client.buildAuthorizeUrl(options));\n    }\n    /**\n     * ```js\n     * buildLogoutUrl().subscribe(url => ...)\n     * ```\n     * Builds a URL to the logout endpoint.\n     *\n     * @param options The options used to configure the parameters that appear in the logout endpoint URL.\n     * @returns a URL to the logout endpoint using the parameters provided as arguments.\n     */\n    buildLogoutUrl(options) {\n        return of(this.auth0Client.buildLogoutUrl(options));\n    }\n    shouldHandleCallback() {\n        return of(location.search).pipe(map((search) => {\n            return ((search.includes('code=') || search.includes('error=')) &&\n                search.includes('state=') &&\n                !this.configFactory.get().skipRedirectCallback);\n        }));\n    }\n}\nAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthService, deps: [{ token: Auth0ClientService }, { token: AuthClientConfig }, { token: AbstractNavigator }, { token: AuthState }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.Auth0Client, decorators: [{\n                    type: Inject,\n                    args: [Auth0ClientService]\n                }] }, { type: AuthClientConfig }, { type: AbstractNavigator }, { type: AuthState }]; } });\n\nclass AuthGuard {\n    constructor(auth) {\n        this.auth = auth;\n    }\n    canLoad(route, segments) {\n        return this.auth.isAuthenticated$.pipe(take(1));\n    }\n    canActivate(next, state) {\n        return this.redirectIfUnauthenticated(state);\n    }\n    canActivateChild(childRoute, state) {\n        return this.redirectIfUnauthenticated(state);\n    }\n    redirectIfUnauthenticated(state) {\n        return this.auth.isAuthenticated$.pipe(tap((loggedIn) => {\n            if (!loggedIn) {\n                this.auth.loginWithRedirect({\n                    appState: { target: state.url },\n                });\n            }\n        }));\n    }\n}\nAuthGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthGuard, deps: [{ token: AuthService }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthGuard, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthGuard, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: AuthService }]; } });\n\nclass AuthModule {\n    /**\n     * Initialize the authentication module system. Configuration can either be specified here,\n     * or by calling AuthClientConfig.set (perhaps from an APP_INITIALIZER factory function).\n     * @param config The optional configuration for the SDK.\n     */\n    static forRoot(config) {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                AuthService,\n                AuthGuard,\n                {\n                    provide: AuthConfigService,\n                    useValue: config,\n                },\n                {\n                    provide: Auth0ClientService,\n                    useFactory: Auth0ClientFactory.createClient,\n                    deps: [AuthClientConfig],\n                },\n            ],\n        };\n    }\n}\nAuthModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAuthModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthModule });\nAuthModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthModule, decorators: [{\n            type: NgModule\n        }] });\n\nclass AuthHttpInterceptor {\n    constructor(configFactory, auth0Client, authState) {\n        this.configFactory = configFactory;\n        this.auth0Client = auth0Client;\n        this.authState = authState;\n    }\n    intercept(req, next) {\n        var _a;\n        const config = this.configFactory.get();\n        if (!((_a = config.httpInterceptor) === null || _a === void 0 ? void 0 : _a.allowedList)) {\n            return next.handle(req);\n        }\n        return this.findMatchingRoute(req, config.httpInterceptor).pipe(concatMap((route) => iif(\n        // Check if a route was matched\n        () => route !== null, \n        // If we have a matching route, call getTokenSilently and attach the token to the\n        // outgoing request\n        of(route).pipe(pluck('tokenOptions'), concatMap((options) => {\n            return this.getAccessTokenSilently(options).pipe(catchError((err) => {\n                if (this.allowAnonymous(route, err)) {\n                    return of('');\n                }\n                this.authState.setError(err);\n                return throwError(err);\n            }));\n        }), switchMap((token) => {\n            // Clone the request and attach the bearer token\n            const clone = token\n                ? req.clone({\n                    headers: req.headers.set('Authorization', `Bearer ${token}`),\n                })\n                : req;\n            return next.handle(clone);\n        })), \n        // If the URI being called was not found in our httpInterceptor config, simply\n        // pass the request through without attaching a token\n        next.handle(req))));\n    }\n    /**\n     * Duplicate of AuthService.getAccessTokenSilently, but with a slightly different error handling.\n     * Only used internally in the interceptor.\n     * @param options The options for configuring the token fetch.\n     */\n    getAccessTokenSilently(options) {\n        return of(this.auth0Client).pipe(concatMap((client) => client.getTokenSilently(options)), tap((token) => this.authState.setAccessToken(token)), catchError((error) => {\n            this.authState.refresh();\n            return throwError(error);\n        }));\n    }\n    /**\n     * Strips the query and fragment from the given uri\n     * @param uri The uri to remove the query and fragment from\n     */\n    stripQueryFrom(uri) {\n        if (uri.indexOf('?') > -1) {\n            uri = uri.substr(0, uri.indexOf('?'));\n        }\n        if (uri.indexOf('#') > -1) {\n            uri = uri.substr(0, uri.indexOf('#'));\n        }\n        return uri;\n    }\n    /**\n     * Determines whether the specified route can have an access token attached to it, based on matching the HTTP request against\n     * the interceptor route configuration.\n     * @param route The route to test\n     * @param request The HTTP request\n     */\n    canAttachToken(route, request) {\n        const testPrimitive = (value) => {\n            if (!value) {\n                return false;\n            }\n            const requestPath = this.stripQueryFrom(request.url);\n            if (value === requestPath) {\n                return true;\n            }\n            // If the URL ends with an asterisk, match using startsWith.\n            return (value.indexOf('*') === value.length - 1 &&\n                request.url.startsWith(value.substr(0, value.length - 1)));\n        };\n        if (isHttpInterceptorRouteConfig(route)) {\n            if (route.httpMethod && route.httpMethod !== request.method) {\n                return false;\n            }\n            /* istanbul ignore if */\n            if (!route.uri && !route.uriMatcher) {\n                console.warn('Either a uri or uriMatcher is required when configuring the HTTP interceptor.');\n            }\n            return route.uriMatcher\n                ? route.uriMatcher(request.url)\n                : testPrimitive(route.uri);\n        }\n        return testPrimitive(route);\n    }\n    /**\n     * Tries to match a route from the SDK configuration to the HTTP request.\n     * If a match is found, the route configuration is returned.\n     * @param request The Http request\n     * @param config HttpInterceptorConfig\n     */\n    findMatchingRoute(request, config) {\n        return from(config.allowedList).pipe(first((route) => this.canAttachToken(route, request), null));\n    }\n    allowAnonymous(route, err) {\n        return (!!route &&\n            isHttpInterceptorRouteConfig(route) &&\n            !!route.allowAnonymous &&\n            ['login_required', 'consent_required'].includes(err.error));\n    }\n}\nAuthHttpInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthHttpInterceptor, deps: [{ token: AuthClientConfig }, { token: Auth0ClientService }, { token: AuthState }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthHttpInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthHttpInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: AuthHttpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: AuthClientConfig }, { type: i1$1.Auth0Client, decorators: [{\n                    type: Inject,\n                    args: [Auth0ClientService]\n                }] }, { type: AuthState }]; } });\n\n/*\n * Public API Surface of auth0-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth0ClientFactory, Auth0ClientService, AuthClientConfig, AuthConfigService, AuthGuard, AuthHttpInterceptor, AuthModule, AuthService, AuthState, isHttpInterceptorRouteConfig };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}